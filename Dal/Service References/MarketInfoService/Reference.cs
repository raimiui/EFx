//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFx.Dal.MarketInfoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIOperationResult", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.HistoricalQuotes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Indices))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.News))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Indicators))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Outlook))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.InterestRates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.InsideViewer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Currencies))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.NonBusinessDays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Quotes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Quote))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.CurrencyPairs))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.CurrencyPair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.IndicatorsSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.CrossCurrencyRates))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Holidays))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.InsideViewerCurrRate))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.CurrencyPairPopularityResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.MarketInfoService.Session))]
    public partial class APIOperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.OperationResult ErrorTicketField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.OperationResult ErrorTicket {
            get {
                return this.ErrorTicketField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTicketField, value) != true)) {
                    this.ErrorTicketField = value;
                    this.RaisePropertyChanged("ErrorTicket");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/EZFX.Infrastructure.ErrorHandling")]
    [System.SerializableAttribute()]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TicketIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorNumber {
            get {
                return this.ErrorNumberField;
            }
            set {
                if ((this.ErrorNumberField.Equals(value) != true)) {
                    this.ErrorNumberField = value;
                    this.RaisePropertyChanged("ErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TicketId {
            get {
                return this.TicketIdField;
            }
            set {
                if ((this.TicketIdField.Equals(value) != true)) {
                    this.TicketIdField = value;
                    this.RaisePropertyChanged("TicketId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HistoricalQuotes", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class HistoricalQuotes : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.HistoricalQuote[] HistoricalQuotesListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuoteCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.RateTypeIds RateTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseCurrency {
            get {
                return this.BaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseCurrencyField, value) != true)) {
                    this.BaseCurrencyField = value;
                    this.RaisePropertyChanged("BaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.HistoricalQuote[] HistoricalQuotesList {
            get {
                return this.HistoricalQuotesListField;
            }
            set {
                if ((object.ReferenceEquals(this.HistoricalQuotesListField, value) != true)) {
                    this.HistoricalQuotesListField = value;
                    this.RaisePropertyChanged("HistoricalQuotesList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuoteCurrency {
            get {
                return this.QuoteCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.QuoteCurrencyField, value) != true)) {
                    this.QuoteCurrencyField = value;
                    this.RaisePropertyChanged("QuoteCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.RateTypeIds RateType {
            get {
                return this.RateTypeField;
            }
            set {
                if ((this.RateTypeField.Equals(value) != true)) {
                    this.RateTypeField = value;
                    this.RaisePropertyChanged("RateType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Indices", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Indices : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Index[] IndicesListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Index[] IndicesList {
            get {
                return this.IndicesListField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicesListField, value) != true)) {
                    this.IndicesListField = value;
                    this.RaisePropertyChanged("IndicesList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="News", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class News : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.NewsFeed[] NewsListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.NewsFeed[] NewsList {
            get {
                return this.NewsListField;
            }
            set {
                if ((object.ReferenceEquals(this.NewsListField, value) != true)) {
                    this.NewsListField = value;
                    this.RaisePropertyChanged("NewsList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Indicators", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Indicators : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Indicator[] IndicatorsListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Indicator[] IndicatorsList {
            get {
                return this.IndicatorsListField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicatorsListField, value) != true)) {
                    this.IndicatorsListField = value;
                    this.RaisePropertyChanged("IndicatorsList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Outlook", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Outlook : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.OutlookItem[] OutlookItemsListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.OutlookItem[] OutlookItemsList {
            get {
                return this.OutlookItemsListField;
            }
            set {
                if ((object.ReferenceEquals(this.OutlookItemsListField, value) != true)) {
                    this.OutlookItemsListField = value;
                    this.RaisePropertyChanged("OutlookItemsList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InterestRates", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class InterestRates : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<EFx.Dal.MarketInfoService.InterestRatesPeriods, double>> InterestsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<EFx.Dal.MarketInfoService.InterestRatesPeriods, double>> Interests {
            get {
                return this.InterestsField;
            }
            set {
                if ((object.ReferenceEquals(this.InterestsField, value) != true)) {
                    this.InterestsField = value;
                    this.RaisePropertyChanged("Interests");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InsideViewer", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class InsideViewer : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AverageRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AverageStopLossRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AverageTakeProfitRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BuyPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrencyPairDealsPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrencyPairRankingField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageRate {
            get {
                return this.AverageRateField;
            }
            set {
                if ((this.AverageRateField.Equals(value) != true)) {
                    this.AverageRateField = value;
                    this.RaisePropertyChanged("AverageRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageStopLossRate {
            get {
                return this.AverageStopLossRateField;
            }
            set {
                if ((this.AverageStopLossRateField.Equals(value) != true)) {
                    this.AverageStopLossRateField = value;
                    this.RaisePropertyChanged("AverageStopLossRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageTakeProfitRate {
            get {
                return this.AverageTakeProfitRateField;
            }
            set {
                if ((this.AverageTakeProfitRateField.Equals(value) != true)) {
                    this.AverageTakeProfitRateField = value;
                    this.RaisePropertyChanged("AverageTakeProfitRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BuyPercent {
            get {
                return this.BuyPercentField;
            }
            set {
                if ((this.BuyPercentField.Equals(value) != true)) {
                    this.BuyPercentField = value;
                    this.RaisePropertyChanged("BuyPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrencyPairDealsPercent {
            get {
                return this.CurrencyPairDealsPercentField;
            }
            set {
                if ((this.CurrencyPairDealsPercentField.Equals(value) != true)) {
                    this.CurrencyPairDealsPercentField = value;
                    this.RaisePropertyChanged("CurrencyPairDealsPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrencyPairRanking {
            get {
                return this.CurrencyPairRankingField;
            }
            set {
                if ((this.CurrencyPairRankingField.Equals(value) != true)) {
                    this.CurrencyPairRankingField = value;
                    this.RaisePropertyChanged("CurrencyPairRanking");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currencies", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Currencies : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] CurrenciesListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Currency[] CurrenciesSettingsListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RestrictedCurrenciesListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Currency[] RestrictedCurrenciesSettingsListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] CurrenciesList {
            get {
                return this.CurrenciesListField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrenciesListField, value) != true)) {
                    this.CurrenciesListField = value;
                    this.RaisePropertyChanged("CurrenciesList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Currency[] CurrenciesSettingsList {
            get {
                return this.CurrenciesSettingsListField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrenciesSettingsListField, value) != true)) {
                    this.CurrenciesSettingsListField = value;
                    this.RaisePropertyChanged("CurrenciesSettingsList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RestrictedCurrenciesList {
            get {
                return this.RestrictedCurrenciesListField;
            }
            set {
                if ((object.ReferenceEquals(this.RestrictedCurrenciesListField, value) != true)) {
                    this.RestrictedCurrenciesListField = value;
                    this.RaisePropertyChanged("RestrictedCurrenciesList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Currency[] RestrictedCurrenciesSettingsList {
            get {
                return this.RestrictedCurrenciesSettingsListField;
            }
            set {
                if ((object.ReferenceEquals(this.RestrictedCurrenciesSettingsListField, value) != true)) {
                    this.RestrictedCurrenciesSettingsListField = value;
                    this.RaisePropertyChanged("RestrictedCurrenciesSettingsList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NonBusinessDays", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class NonBusinessDays : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime[] DateListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime[] DateList {
            get {
                return this.DateListField;
            }
            set {
                if ((object.ReferenceEquals(this.DateListField, value) != true)) {
                    this.DateListField = value;
                    this.RaisePropertyChanged("DateList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Quotes", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Quotes : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Quote[] QuotesListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Quote[] QuotesList {
            get {
                return this.QuotesListField;
            }
            set {
                if ((object.ReferenceEquals(this.QuotesListField, value) != true)) {
                    this.QuotesListField = value;
                    this.RaisePropertyChanged("QuotesList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Quote", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Quote : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ChangePercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreviousHighField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreviousLowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuoteCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ask {
            get {
                return this.AskField;
            }
            set {
                if ((this.AskField.Equals(value) != true)) {
                    this.AskField = value;
                    this.RaisePropertyChanged("Ask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseCurrency {
            get {
                return this.BaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseCurrencyField, value) != true)) {
                    this.BaseCurrencyField = value;
                    this.RaisePropertyChanged("BaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bid {
            get {
                return this.BidField;
            }
            set {
                if ((this.BidField.Equals(value) != true)) {
                    this.BidField = value;
                    this.RaisePropertyChanged("Bid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ChangePercent {
            get {
                return this.ChangePercentField;
            }
            set {
                if ((this.ChangePercentField.Equals(value) != true)) {
                    this.ChangePercentField = value;
                    this.RaisePropertyChanged("ChangePercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double High {
            get {
                return this.HighField;
            }
            set {
                if ((this.HighField.Equals(value) != true)) {
                    this.HighField = value;
                    this.RaisePropertyChanged("High");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Low {
            get {
                return this.LowField;
            }
            set {
                if ((this.LowField.Equals(value) != true)) {
                    this.LowField = value;
                    this.RaisePropertyChanged("Low");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousHigh {
            get {
                return this.PreviousHighField;
            }
            set {
                if ((this.PreviousHighField.Equals(value) != true)) {
                    this.PreviousHighField = value;
                    this.RaisePropertyChanged("PreviousHigh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousLow {
            get {
                return this.PreviousLowField;
            }
            set {
                if ((this.PreviousLowField.Equals(value) != true)) {
                    this.PreviousLowField = value;
                    this.RaisePropertyChanged("PreviousLow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuoteCurrency {
            get {
                return this.QuoteCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.QuoteCurrencyField, value) != true)) {
                    this.QuoteCurrencyField = value;
                    this.RaisePropertyChanged("QuoteCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyPairs", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class CurrencyPairs : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.CurrencyPair[] CurrencyPairsListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.CurrencyPair[] DefaultCurrencyPairsListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultFractionalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.CurrencyPair[] RestrictedCurrencyPairsListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.CurrencyPair[] CurrencyPairsList {
            get {
                return this.CurrencyPairsListField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyPairsListField, value) != true)) {
                    this.CurrencyPairsListField = value;
                    this.RaisePropertyChanged("CurrencyPairsList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.CurrencyPair[] DefaultCurrencyPairsList {
            get {
                return this.DefaultCurrencyPairsListField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultCurrencyPairsListField, value) != true)) {
                    this.DefaultCurrencyPairsListField = value;
                    this.RaisePropertyChanged("DefaultCurrencyPairsList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefaultFractional {
            get {
                return this.IsDefaultFractionalField;
            }
            set {
                if ((this.IsDefaultFractionalField.Equals(value) != true)) {
                    this.IsDefaultFractionalField = value;
                    this.RaisePropertyChanged("IsDefaultFractional");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.CurrencyPair[] RestrictedCurrencyPairsList {
            get {
                return this.RestrictedCurrencyPairsListField;
            }
            set {
                if ((object.ReferenceEquals(this.RestrictedCurrencyPairsListField, value) != true)) {
                    this.RestrictedCurrencyPairsListField = value;
                    this.RaisePropertyChanged("RestrictedCurrencyPairsList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyPair", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class CurrencyPair : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Currency BaseCurrencySettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short DecimalPlacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short FractionalPlacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double IncrementValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Currency NonBaseCurrencySettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NumOfIncrementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuoteCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseCurrency {
            get {
                return this.BaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseCurrencyField, value) != true)) {
                    this.BaseCurrencyField = value;
                    this.RaisePropertyChanged("BaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Currency BaseCurrencySettings {
            get {
                return this.BaseCurrencySettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseCurrencySettingsField, value) != true)) {
                    this.BaseCurrencySettingsField = value;
                    this.RaisePropertyChanged("BaseCurrencySettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short DecimalPlaces {
            get {
                return this.DecimalPlacesField;
            }
            set {
                if ((this.DecimalPlacesField.Equals(value) != true)) {
                    this.DecimalPlacesField = value;
                    this.RaisePropertyChanged("DecimalPlaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short FractionalPlaces {
            get {
                return this.FractionalPlacesField;
            }
            set {
                if ((this.FractionalPlacesField.Equals(value) != true)) {
                    this.FractionalPlacesField = value;
                    this.RaisePropertyChanged("FractionalPlaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double IncrementValue {
            get {
                return this.IncrementValueField;
            }
            set {
                if ((this.IncrementValueField.Equals(value) != true)) {
                    this.IncrementValueField = value;
                    this.RaisePropertyChanged("IncrementValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Currency NonBaseCurrencySettings {
            get {
                return this.NonBaseCurrencySettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.NonBaseCurrencySettingsField, value) != true)) {
                    this.NonBaseCurrencySettingsField = value;
                    this.RaisePropertyChanged("NonBaseCurrencySettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NumOfIncrement {
            get {
                return this.NumOfIncrementField;
            }
            set {
                if ((this.NumOfIncrementField.Equals(value) != true)) {
                    this.NumOfIncrementField = value;
                    this.RaisePropertyChanged("NumOfIncrement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuoteCurrency {
            get {
                return this.QuoteCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.QuoteCurrencyField, value) != true)) {
                    this.QuoteCurrencyField = value;
                    this.RaisePropertyChanged("QuoteCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((this.UnitsField.Equals(value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndicatorsSettings", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class IndicatorsSettings : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] LocationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] NamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PeriodsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UnitsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Locations {
            get {
                return this.LocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationsField, value) != true)) {
                    this.LocationsField = value;
                    this.RaisePropertyChanged("Locations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Names {
            get {
                return this.NamesField;
            }
            set {
                if ((object.ReferenceEquals(this.NamesField, value) != true)) {
                    this.NamesField = value;
                    this.RaisePropertyChanged("Names");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Periods {
            get {
                return this.PeriodsField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodsField, value) != true)) {
                    this.PeriodsField = value;
                    this.RaisePropertyChanged("Periods");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CrossCurrencyRates", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class CrossCurrencyRates : EFx.Dal.MarketInfoService.APIOperationResult {
        
        private EFx.Dal.MarketInfoService.SimpleQuote[] CurrencyRatesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public EFx.Dal.MarketInfoService.SimpleQuote[] CurrencyRates {
            get {
                return this.CurrencyRatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyRatesField, value) != true)) {
                    this.CurrencyRatesField = value;
                    this.RaisePropertyChanged("CurrencyRates");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Holidays", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Holidays : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Holiday[] HolidaysListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Holiday[] HolidaysList {
            get {
                return this.HolidaysListField;
            }
            set {
                if ((object.ReferenceEquals(this.HolidaysListField, value) != true)) {
                    this.HolidaysListField = value;
                    this.RaisePropertyChanged("HolidaysList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InsideViewerCurrRate", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common.InsideViewerData")]
    [System.SerializableAttribute()]
    public partial class InsideViewerCurrRate : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyCurrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrMidRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellCurrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpreadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyCurr {
            get {
                return this.BuyCurrField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyCurrField, value) != true)) {
                    this.BuyCurrField = value;
                    this.RaisePropertyChanged("BuyCurr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrMidRate {
            get {
                return this.CurrMidRateField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrMidRateField, value) != true)) {
                    this.CurrMidRateField = value;
                    this.RaisePropertyChanged("CurrMidRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrRate {
            get {
                return this.CurrRateField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrRateField, value) != true)) {
                    this.CurrRateField = value;
                    this.RaisePropertyChanged("CurrRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellCurr {
            get {
                return this.SellCurrField;
            }
            set {
                if ((object.ReferenceEquals(this.SellCurrField, value) != true)) {
                    this.SellCurrField = value;
                    this.RaisePropertyChanged("SellCurr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Spread {
            get {
                return this.SpreadField;
            }
            set {
                if ((object.ReferenceEquals(this.SpreadField, value) != true)) {
                    this.SpreadField = value;
                    this.RaisePropertyChanged("Spread");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyPairPopularityResult", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common.InsideViewerData")]
    [System.SerializableAttribute()]
    public partial class CurrencyPairPopularityResult : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.CurrencyPairPopularityItem[] CPPopularityItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.CurrencyPairPopularityItem[] CPPopularityItems {
            get {
                return this.CPPopularityItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.CPPopularityItemsField, value) != true)) {
                    this.CPPopularityItemsField = value;
                    this.RaisePropertyChanged("CPPopularityItems");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Session : EFx.Dal.MarketInfoService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Ticket[] TicketsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.Version VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIdField, value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Ticket[] Tickets {
            get {
                return this.TicketsField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketsField, value) != true)) {
                    this.TicketsField = value;
                    this.RaisePropertyChanged("Tickets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.Version Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Version", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Version : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GenerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MajorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Generation {
            get {
                return this.GenerationField;
            }
            set {
                if ((this.GenerationField.Equals(value) != true)) {
                    this.GenerationField = value;
                    this.RaisePropertyChanged("Generation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Major {
            get {
                return this.MajorField;
            }
            set {
                if ((this.MajorField.Equals(value) != true)) {
                    this.MajorField = value;
                    this.RaisePropertyChanged("Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Minor {
            get {
                return this.MinorField;
            }
            set {
                if ((this.MinorField.Equals(value) != true)) {
                    this.MinorField = value;
                    this.RaisePropertyChanged("Minor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Ticket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TicketNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TicketValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TicketName {
            get {
                return this.TicketNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketNameField, value) != true)) {
                    this.TicketNameField = value;
                    this.RaisePropertyChanged("TicketName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TicketValue {
            get {
                return this.TicketValueField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketValueField, value) != true)) {
                    this.TicketValueField = value;
                    this.RaisePropertyChanged("TicketValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HistoricalQuote", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class HistoricalQuote : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CloseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime createUTCField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Close {
            get {
                return this.CloseField;
            }
            set {
                if ((this.CloseField.Equals(value) != true)) {
                    this.CloseField = value;
                    this.RaisePropertyChanged("Close");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double High {
            get {
                return this.HighField;
            }
            set {
                if ((this.HighField.Equals(value) != true)) {
                    this.HighField = value;
                    this.RaisePropertyChanged("High");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Low {
            get {
                return this.LowField;
            }
            set {
                if ((this.LowField.Equals(value) != true)) {
                    this.LowField = value;
                    this.RaisePropertyChanged("Low");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Open {
            get {
                return this.OpenField;
            }
            set {
                if ((this.OpenField.Equals(value) != true)) {
                    this.OpenField = value;
                    this.RaisePropertyChanged("Open");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime createUTC {
            get {
                return this.createUTCField;
            }
            set {
                if ((this.createUTCField.Equals(value) != true)) {
                    this.createUTCField = value;
                    this.RaisePropertyChanged("createUTC");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RateTypeIds", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    public enum RateTypeIds : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bid = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ask = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mid = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Index", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Index : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ChangePercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreviousValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ChangePercent {
            get {
                return this.ChangePercentField;
            }
            set {
                if ((this.ChangePercentField.Equals(value) != true)) {
                    this.ChangePercentField = value;
                    this.RaisePropertyChanged("ChangePercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((this.LastUpdateField.Equals(value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousValue {
            get {
                return this.PreviousValueField;
            }
            set {
                if ((this.PreviousValueField.Equals(value) != true)) {
                    this.PreviousValueField = value;
                    this.RaisePropertyChanged("PreviousValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Symbol {
            get {
                return this.SymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolField, value) != true)) {
                    this.SymbolField = value;
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewsFeed", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class NewsFeed : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArticleBodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ArticleDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArticleHeadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArticleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreditLineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArticleBody {
            get {
                return this.ArticleBodyField;
            }
            set {
                if ((object.ReferenceEquals(this.ArticleBodyField, value) != true)) {
                    this.ArticleBodyField = value;
                    this.RaisePropertyChanged("ArticleBody");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ArticleDate {
            get {
                return this.ArticleDateField;
            }
            set {
                if ((this.ArticleDateField.Equals(value) != true)) {
                    this.ArticleDateField = value;
                    this.RaisePropertyChanged("ArticleDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArticleHeading {
            get {
                return this.ArticleHeadingField;
            }
            set {
                if ((object.ReferenceEquals(this.ArticleHeadingField, value) != true)) {
                    this.ArticleHeadingField = value;
                    this.RaisePropertyChanged("ArticleHeading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArticleName {
            get {
                return this.ArticleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArticleNameField, value) != true)) {
                    this.ArticleNameField = value;
                    this.RaisePropertyChanged("ArticleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreditLine {
            get {
                return this.CreditLineField;
            }
            set {
                if ((object.ReferenceEquals(this.CreditLineField, value) != true)) {
                    this.CreditLineField = value;
                    this.RaisePropertyChanged("CreditLine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemId {
            get {
                return this.ItemIdField;
            }
            set {
                if ((this.ItemIdField.Equals(value) != true)) {
                    this.ItemIdField = value;
                    this.RaisePropertyChanged("ItemId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Indicator", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Indicator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ImportanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndicatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsValuePreviousRevisedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> ValueActualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> ValueForecastField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> ValuePreviousField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Importance {
            get {
                return this.ImportanceField;
            }
            set {
                if ((this.ImportanceField.Equals(value) != true)) {
                    this.ImportanceField = value;
                    this.RaisePropertyChanged("Importance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndicatorName {
            get {
                return this.IndicatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicatorNameField, value) != true)) {
                    this.IndicatorNameField = value;
                    this.RaisePropertyChanged("IndicatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValuePreviousRevised {
            get {
                return this.IsValuePreviousRevisedField;
            }
            set {
                if ((this.IsValuePreviousRevisedField.Equals(value) != true)) {
                    this.IsValuePreviousRevisedField = value;
                    this.RaisePropertyChanged("IsValuePreviousRevised");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LanguageSymbol {
            get {
                return this.LanguageSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageSymbolField, value) != true)) {
                    this.LanguageSymbolField = value;
                    this.RaisePropertyChanged("LanguageSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Period {
            get {
                return this.PeriodField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodField, value) != true)) {
                    this.PeriodField = value;
                    this.RaisePropertyChanged("Period");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ValueActual {
            get {
                return this.ValueActualField;
            }
            set {
                if ((this.ValueActualField.Equals(value) != true)) {
                    this.ValueActualField = value;
                    this.RaisePropertyChanged("ValueActual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ValueForecast {
            get {
                return this.ValueForecastField;
            }
            set {
                if ((this.ValueForecastField.Equals(value) != true)) {
                    this.ValueForecastField = value;
                    this.RaisePropertyChanged("ValueForecast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> ValuePrevious {
            get {
                return this.ValuePreviousField;
            }
            set {
                if ((this.ValuePreviousField.Equals(value) != true)) {
                    this.ValuePreviousField = value;
                    this.RaisePropertyChanged("ValuePrevious");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OutlookItem", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class OutlookItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PublishDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PublishDate {
            get {
                return this.PublishDateField;
            }
            set {
                if ((this.PublishDateField.Equals(value) != true)) {
                    this.PublishDateField = value;
                    this.RaisePropertyChanged("PublishDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InterestRatesPeriods", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    public enum InterestRatesPeriods : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneWeek = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneMonth = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ThreeMonths = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SixMonths = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OneYear = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currency", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Currency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.MarketInfoService.CurrencyKind KindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SymbolField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.MarketInfoService.CurrencyKind Kind {
            get {
                return this.KindField;
            }
            set {
                if ((this.KindField.Equals(value) != true)) {
                    this.KindField = value;
                    this.RaisePropertyChanged("Kind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Symbol {
            get {
                return this.SymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.SymbolField, value) != true)) {
                    this.SymbolField = value;
                    this.RaisePropertyChanged("Symbol");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyKind", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    public enum CurrencyKind : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Regular = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Commodity = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleQuote", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class SimpleQuote : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string BuyCurrencyField;
        
        private string RateField;
        
        private string SellCurrencyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string BuyCurrency {
            get {
                return this.BuyCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyCurrencyField, value) != true)) {
                    this.BuyCurrencyField = value;
                    this.RaisePropertyChanged("BuyCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Rate {
            get {
                return this.RateField;
            }
            set {
                if ((object.ReferenceEquals(this.RateField, value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SellCurrency {
            get {
                return this.SellCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.SellCurrencyField, value) != true)) {
                    this.SellCurrencyField = value;
                    this.RaisePropertyChanged("SellCurrency");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Holiday", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Holiday : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HolidayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HolidayName {
            get {
                return this.HolidayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HolidayNameField, value) != true)) {
                    this.HolidayNameField = value;
                    this.RaisePropertyChanged("HolidayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LanguageSymbol {
            get {
                return this.LanguageSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageSymbolField, value) != true)) {
                    this.LanguageSymbolField = value;
                    this.RaisePropertyChanged("LanguageSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyPairPopularityItem", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common.InsideViewerData")]
    [System.SerializableAttribute()]
    public partial class CurrencyPairPopularityItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NonBaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PopularityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseCurrency {
            get {
                return this.BaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseCurrencyField, value) != true)) {
                    this.BaseCurrencyField = value;
                    this.RaisePropertyChanged("BaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NonBaseCurrency {
            get {
                return this.NonBaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.NonBaseCurrencyField, value) != true)) {
                    this.NonBaseCurrencyField = value;
                    this.RaisePropertyChanged("NonBaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Popularity {
            get {
                return this.PopularityField;
            }
            set {
                if ((this.PopularityField.Equals(value) != true)) {
                    this.PopularityField = value;
                    this.RaisePropertyChanged("Popularity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndicatorImportance", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    public enum IndicatorImportance : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        High = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medium = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Low = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MarketInfoService.IEasyForexMarketInfoService")]
    public interface IEasyForexMarketInfoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/Login", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/LoginResponse")]
        EFx.Dal.MarketInfoService.Session Login(string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/Logout", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/LogoutResponse")]
        EFx.Dal.MarketInfoService.APIOperationResult Logout(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetHistoricalQuotes", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetHistoricalQuotesResponse")]
        EFx.Dal.MarketInfoService.HistoricalQuotes GetHistoricalQuotes(string sessionId, EFx.Dal.MarketInfoService.RateTypeIds rateType, string baseCurrency, string nonBaseCurrency, long timeScaleSec, System.Nullable<int> numberOfPoints, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<bool> isRateFractional);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetIndices", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetIndicesResponse")]
        EFx.Dal.MarketInfoService.Indices GetIndices(string sessionId, string[] symbol, int portalId, string culture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetNews", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetNewsResponse")]
        EFx.Dal.MarketInfoService.News GetNews(string sessionId, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetFinancialCalendarData", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetFinancialCalendarDataResponse")]
        EFx.Dal.MarketInfoService.Indicators GetFinancialCalendarData(string sessionId, System.DateTime fromDate, System.DateTime toDate, string[] names, string[] periods, string[] locations, string[] units, EFx.Dal.MarketInfoService.IndicatorImportance[] importance, string languageSymbol);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetForexOutlook", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetForexOutlookResponse")]
        EFx.Dal.MarketInfoService.Outlook GetForexOutlook(string sessionId, string culture, string type, System.Nullable<System.DateTime> fromPublishDate, System.Nullable<System.DateTime> toPublishDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetInterestRates", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetInterestRatesResponse")]
        EFx.Dal.MarketInfoService.InterestRates GetInterestRates(string sessionId, string[] currencySymbols);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetInsideViewerData", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetInsideViewerDataResponse")]
        EFx.Dal.MarketInfoService.InsideViewer GetInsideViewerData(string sessionId, string buyCurrency, string sellCurrency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetCurrencyList", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetCurrencyListResponse")]
        EFx.Dal.MarketInfoService.Currencies GetCurrencyList(string sessionId, System.Nullable<bool> getRestricted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetNonBusinessDays", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetNonBusinessDaysResponse")]
        EFx.Dal.MarketInfoService.NonBusinessDays GetNonBusinessDays(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetQuotes", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetQuotesResponse")]
        EFx.Dal.MarketInfoService.Quotes GetQuotes(string sessionId, string[] currencyPairsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetCurrencySettings", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetCurrencySettingsResponse")]
        EFx.Dal.MarketInfoService.Currencies GetCurrencySettings(string sessionId, System.Nullable<bool> getRestricted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetCurrencyPairSettings", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetCurrencyPairSettingsResponse")]
        EFx.Dal.MarketInfoService.CurrencyPairs GetCurrencyPairSettings(string sessionId, string[] currencyPairsList, System.Nullable<bool> getRestricted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetIndicatorsSettings", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetIndicatorsSettingsResponse")]
        EFx.Dal.MarketInfoService.IndicatorsSettings GetIndicatorsSettings(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetCrossCurrencyRates", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetCrossCurrencyRatesResponse")]
        EFx.Dal.MarketInfoService.CrossCurrencyRates GetCrossCurrencyRates(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetInsideViewerCurrRate", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetInsideViewerCurrRateResponse")]
        EFx.Dal.MarketInfoService.InsideViewerCurrRate GetInsideViewerCurrRate(string sessionId, string buyCurr, string sellCurr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetPopularityData", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetPopularityDataResponse")]
        EFx.Dal.MarketInfoService.CurrencyPairPopularityResult GetPopularityData(string sessionId, string cBuy, string cSell);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexMarketInfoService/GetFinancialCalendarDataHolidays", ReplyAction="http://tempuri.org/IEasyForexMarketInfoService/GetFinancialCalendarDataHolidaysRe" +
            "sponse")]
        EFx.Dal.MarketInfoService.Holidays GetFinancialCalendarDataHolidays(string sessionId, System.DateTime fromDate, System.DateTime toDate, string[] names, string[] locations, string languageSymbol);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEasyForexMarketInfoServiceChannel : EFx.Dal.MarketInfoService.IEasyForexMarketInfoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EasyForexMarketInfoServiceClient : System.ServiceModel.ClientBase<EFx.Dal.MarketInfoService.IEasyForexMarketInfoService>, EFx.Dal.MarketInfoService.IEasyForexMarketInfoService {
        
        public EasyForexMarketInfoServiceClient() {
        }
        
        public EasyForexMarketInfoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EasyForexMarketInfoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EasyForexMarketInfoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EasyForexMarketInfoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EFx.Dal.MarketInfoService.Session Login(string applicationId) {
            return base.Channel.Login(applicationId);
        }
        
        public EFx.Dal.MarketInfoService.APIOperationResult Logout(string sessionId) {
            return base.Channel.Logout(sessionId);
        }
        
        public EFx.Dal.MarketInfoService.HistoricalQuotes GetHistoricalQuotes(string sessionId, EFx.Dal.MarketInfoService.RateTypeIds rateType, string baseCurrency, string nonBaseCurrency, long timeScaleSec, System.Nullable<int> numberOfPoints, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, System.Nullable<bool> isRateFractional) {
            return base.Channel.GetHistoricalQuotes(sessionId, rateType, baseCurrency, nonBaseCurrency, timeScaleSec, numberOfPoints, startTime, endTime, isRateFractional);
        }
        
        public EFx.Dal.MarketInfoService.Indices GetIndices(string sessionId, string[] symbol, int portalId, string culture) {
            return base.Channel.GetIndices(sessionId, symbol, portalId, culture);
        }
        
        public EFx.Dal.MarketInfoService.News GetNews(string sessionId, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetNews(sessionId, fromDate, toDate);
        }
        
        public EFx.Dal.MarketInfoService.Indicators GetFinancialCalendarData(string sessionId, System.DateTime fromDate, System.DateTime toDate, string[] names, string[] periods, string[] locations, string[] units, EFx.Dal.MarketInfoService.IndicatorImportance[] importance, string languageSymbol) {
            return base.Channel.GetFinancialCalendarData(sessionId, fromDate, toDate, names, periods, locations, units, importance, languageSymbol);
        }
        
        public EFx.Dal.MarketInfoService.Outlook GetForexOutlook(string sessionId, string culture, string type, System.Nullable<System.DateTime> fromPublishDate, System.Nullable<System.DateTime> toPublishDate) {
            return base.Channel.GetForexOutlook(sessionId, culture, type, fromPublishDate, toPublishDate);
        }
        
        public EFx.Dal.MarketInfoService.InterestRates GetInterestRates(string sessionId, string[] currencySymbols) {
            return base.Channel.GetInterestRates(sessionId, currencySymbols);
        }
        
        public EFx.Dal.MarketInfoService.InsideViewer GetInsideViewerData(string sessionId, string buyCurrency, string sellCurrency) {
            return base.Channel.GetInsideViewerData(sessionId, buyCurrency, sellCurrency);
        }
        
        public EFx.Dal.MarketInfoService.Currencies GetCurrencyList(string sessionId, System.Nullable<bool> getRestricted) {
            return base.Channel.GetCurrencyList(sessionId, getRestricted);
        }
        
        public EFx.Dal.MarketInfoService.NonBusinessDays GetNonBusinessDays(string sessionId) {
            return base.Channel.GetNonBusinessDays(sessionId);
        }
        
        public EFx.Dal.MarketInfoService.Quotes GetQuotes(string sessionId, string[] currencyPairsList) {
            return base.Channel.GetQuotes(sessionId, currencyPairsList);
        }
        
        public EFx.Dal.MarketInfoService.Currencies GetCurrencySettings(string sessionId, System.Nullable<bool> getRestricted) {
            return base.Channel.GetCurrencySettings(sessionId, getRestricted);
        }
        
        public EFx.Dal.MarketInfoService.CurrencyPairs GetCurrencyPairSettings(string sessionId, string[] currencyPairsList, System.Nullable<bool> getRestricted) {
            return base.Channel.GetCurrencyPairSettings(sessionId, currencyPairsList, getRestricted);
        }
        
        public EFx.Dal.MarketInfoService.IndicatorsSettings GetIndicatorsSettings(string sessionId) {
            return base.Channel.GetIndicatorsSettings(sessionId);
        }
        
        public EFx.Dal.MarketInfoService.CrossCurrencyRates GetCrossCurrencyRates(string sessionId) {
            return base.Channel.GetCrossCurrencyRates(sessionId);
        }
        
        public EFx.Dal.MarketInfoService.InsideViewerCurrRate GetInsideViewerCurrRate(string sessionId, string buyCurr, string sellCurr) {
            return base.Channel.GetInsideViewerCurrRate(sessionId, buyCurr, sellCurr);
        }
        
        public EFx.Dal.MarketInfoService.CurrencyPairPopularityResult GetPopularityData(string sessionId, string cBuy, string cSell) {
            return base.Channel.GetPopularityData(sessionId, cBuy, cSell);
        }
        
        public EFx.Dal.MarketInfoService.Holidays GetFinancialCalendarDataHolidays(string sessionId, System.DateTime fromDate, System.DateTime toDate, string[] names, string[] locations, string languageSymbol) {
            return base.Channel.GetFinancialCalendarDataHolidays(sessionId, fromDate, toDate, names, locations, languageSymbol);
        }
    }
}
