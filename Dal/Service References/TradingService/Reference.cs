//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFx.Dal.TradingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIOperationResult", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.TradableQuotes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.TradableQuote))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Deal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.DayTrading))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Forward))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Limit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.MyPosition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.MyAccount))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Quotes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Quote))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.UserSettings))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.ExpiryDate))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.ProductSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.SpreadsTemplateInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.PersonalSpreadsInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.AllowPersonalSpreadInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.UserLoginInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.MyStatement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.RollingDatesResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Session))]
    public partial class APIOperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.OperationResult ErrorTicketField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.OperationResult ErrorTicket {
            get {
                return this.ErrorTicketField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorTicketField, value) != true)) {
                    this.ErrorTicketField = value;
                    this.RaisePropertyChanged("ErrorTicket");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/EZFX.Infrastructure.ErrorHandling")]
    [System.SerializableAttribute()]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TicketIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorNumber {
            get {
                return this.ErrorNumberField;
            }
            set {
                if ((this.ErrorNumberField.Equals(value) != true)) {
                    this.ErrorNumberField = value;
                    this.RaisePropertyChanged("ErrorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TicketId {
            get {
                return this.TicketIdField;
            }
            set {
                if ((this.TicketIdField.Equals(value) != true)) {
                    this.TicketIdField = value;
                    this.RaisePropertyChanged("TicketId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradableQuotes", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class TradableQuotes : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.TradableQuote[] QuotesListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.TradableQuote[] QuotesList {
            get {
                return this.QuotesListField;
            }
            set {
                if ((object.ReferenceEquals(this.QuotesListField, value) != true)) {
                    this.QuotesListField = value;
                    this.RaisePropertyChanged("QuotesList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradableQuote", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class TradableQuote : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ForwardPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PairSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ask {
            get {
                return this.AskField;
            }
            set {
                if ((this.AskField.Equals(value) != true)) {
                    this.AskField = value;
                    this.RaisePropertyChanged("Ask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bid {
            get {
                return this.BidField;
            }
            set {
                if ((this.BidField.Equals(value) != true)) {
                    this.BidField = value;
                    this.RaisePropertyChanged("Bid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ForwardPoints {
            get {
                return this.ForwardPointsField;
            }
            set {
                if ((this.ForwardPointsField.Equals(value) != true)) {
                    this.ForwardPointsField = value;
                    this.RaisePropertyChanged("ForwardPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PairSymbol {
            get {
                return this.PairSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.PairSymbolField, value) != true)) {
                    this.PairSymbolField = value;
                    this.RaisePropertyChanged("PairSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Deal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.DayTrading))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Forward))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Limit))]
    public partial class Product : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AmountCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BuyAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuyCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CloseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CloseReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DealAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DealIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnableFractionalPipsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MarginAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarginCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OpenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Products ProductTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SellAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> StopLossRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> TakeProfitAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> TakeProfitRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AmountCurrency {
            get {
                return this.AmountCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.AmountCurrencyField, value) != true)) {
                    this.AmountCurrencyField = value;
                    this.RaisePropertyChanged("AmountCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BuyAmount {
            get {
                return this.BuyAmountField;
            }
            set {
                if ((this.BuyAmountField.Equals(value) != true)) {
                    this.BuyAmountField = value;
                    this.RaisePropertyChanged("BuyAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuyCurrency {
            get {
                return this.BuyCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyCurrencyField, value) != true)) {
                    this.BuyCurrencyField = value;
                    this.RaisePropertyChanged("BuyCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CloseDate {
            get {
                return this.CloseDateField;
            }
            set {
                if ((this.CloseDateField.Equals(value) != true)) {
                    this.CloseDateField = value;
                    this.RaisePropertyChanged("CloseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CloseReason {
            get {
                return this.CloseReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.CloseReasonField, value) != true)) {
                    this.CloseReasonField = value;
                    this.RaisePropertyChanged("CloseReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DealAmount {
            get {
                return this.DealAmountField;
            }
            set {
                if ((this.DealAmountField.Equals(value) != true)) {
                    this.DealAmountField = value;
                    this.RaisePropertyChanged("DealAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DealID {
            get {
                return this.DealIDField;
            }
            set {
                if ((this.DealIDField.Equals(value) != true)) {
                    this.DealIDField = value;
                    this.RaisePropertyChanged("DealID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpiryDate {
            get {
                return this.ExpiryDateField;
            }
            set {
                if ((this.ExpiryDateField.Equals(value) != true)) {
                    this.ExpiryDateField = value;
                    this.RaisePropertyChanged("ExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnableFractionalPips {
            get {
                return this.IsEnableFractionalPipsField;
            }
            set {
                if ((this.IsEnableFractionalPipsField.Equals(value) != true)) {
                    this.IsEnableFractionalPipsField = value;
                    this.RaisePropertyChanged("IsEnableFractionalPips");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<double> MarginAmount {
            get {
                return this.MarginAmountField;
            }
            set {
                if ((this.MarginAmountField.Equals(value) != true)) {
                    this.MarginAmountField = value;
                    this.RaisePropertyChanged("MarginAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarginCurrency {
            get {
                return this.MarginCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.MarginCurrencyField, value) != true)) {
                    this.MarginCurrencyField = value;
                    this.RaisePropertyChanged("MarginCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OpenDate {
            get {
                return this.OpenDateField;
            }
            set {
                if ((this.OpenDateField.Equals(value) != true)) {
                    this.OpenDateField = value;
                    this.RaisePropertyChanged("OpenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Products ProductTypeId {
            get {
                return this.ProductTypeIdField;
            }
            set {
                if ((this.ProductTypeIdField.Equals(value) != true)) {
                    this.ProductTypeIdField = value;
                    this.RaisePropertyChanged("ProductTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestTag {
            get {
                return this.RequestTagField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestTagField, value) != true)) {
                    this.RequestTagField = value;
                    this.RaisePropertyChanged("RequestTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double SellAmount {
            get {
                return this.SellAmountField;
            }
            set {
                if ((this.SellAmountField.Equals(value) != true)) {
                    this.SellAmountField = value;
                    this.RaisePropertyChanged("SellAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellCurrency {
            get {
                return this.SellCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.SellCurrencyField, value) != true)) {
                    this.SellCurrencyField = value;
                    this.RaisePropertyChanged("SellCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Nullable<double> StopLossRate {
            get {
                return this.StopLossRateField;
            }
            set {
                if ((this.StopLossRateField.Equals(value) != true)) {
                    this.StopLossRateField = value;
                    this.RaisePropertyChanged("StopLossRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> TakeProfitAmount {
            get {
                return this.TakeProfitAmountField;
            }
            set {
                if ((this.TakeProfitAmountField.Equals(value) != true)) {
                    this.TakeProfitAmountField = value;
                    this.RaisePropertyChanged("TakeProfitAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> TakeProfitRate {
            get {
                return this.TakeProfitRateField;
            }
            set {
                if ((this.TakeProfitRateField.Equals(value) != true)) {
                    this.TakeProfitRateField = value;
                    this.RaisePropertyChanged("TakeProfitRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Deal", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.DayTrading))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.Forward))]
    public partial class Deal : EFx.Dal.TradingService.Product {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.TradableQuote ClosingQuoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ClosingRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ClosingValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.TradableQuote ClosingQuote {
            get {
                return this.ClosingQuoteField;
            }
            set {
                if ((object.ReferenceEquals(this.ClosingQuoteField, value) != true)) {
                    this.ClosingQuoteField = value;
                    this.RaisePropertyChanged("ClosingQuote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ClosingRate {
            get {
                return this.ClosingRateField;
            }
            set {
                if ((this.ClosingRateField.Equals(value) != true)) {
                    this.ClosingRateField = value;
                    this.RaisePropertyChanged("ClosingRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ClosingValue {
            get {
                return this.ClosingValueField;
            }
            set {
                if ((this.ClosingValueField.Equals(value) != true)) {
                    this.ClosingValueField = value;
                    this.RaisePropertyChanged("ClosingValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DayTrading", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class DayTrading : EFx.Dal.TradingService.Deal {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Forward", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Forward : EFx.Dal.TradingService.Deal {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Limit", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Limit : EFx.Dal.TradingService.Product {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> CurrentRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> DayTradingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LimitStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> CurrentRate {
            get {
                return this.CurrentRateField;
            }
            set {
                if ((this.CurrentRateField.Equals(value) != true)) {
                    this.CurrentRateField = value;
                    this.RaisePropertyChanged("CurrentRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> DayTradingID {
            get {
                return this.DayTradingIDField;
            }
            set {
                if ((this.DayTradingIDField.Equals(value) != true)) {
                    this.DayTradingIDField = value;
                    this.RaisePropertyChanged("DayTradingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LimitStatus {
            get {
                return this.LimitStatusField;
            }
            set {
                if ((this.LimitStatusField.Equals(value) != true)) {
                    this.LimitStatusField = value;
                    this.RaisePropertyChanged("LimitStatus");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyPosition", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class MyPosition : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Product[] DealsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PagesCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentPage {
            get {
                return this.CurrentPageField;
            }
            set {
                if ((this.CurrentPageField.Equals(value) != true)) {
                    this.CurrentPageField = value;
                    this.RaisePropertyChanged("CurrentPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Product[] Deals {
            get {
                return this.DealsField;
            }
            set {
                if ((object.ReferenceEquals(this.DealsField, value) != true)) {
                    this.DealsField = value;
                    this.RaisePropertyChanged("Deals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PagesCount {
            get {
                return this.PagesCountField;
            }
            set {
                if ((this.PagesCountField.Equals(value) != true)) {
                    this.PagesCountField = value;
                    this.RaisePropertyChanged("PagesCount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyAccount", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class MyAccount : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FreeBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MarginLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalAccountValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalLoansField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalMarginsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueOfOpenPositionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FreeBalance {
            get {
                return this.FreeBalanceField;
            }
            set {
                if ((this.FreeBalanceField.Equals(value) != true)) {
                    this.FreeBalanceField = value;
                    this.RaisePropertyChanged("FreeBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> MarginLevel {
            get {
                return this.MarginLevelField;
            }
            set {
                if ((this.MarginLevelField.Equals(value) != true)) {
                    this.MarginLevelField = value;
                    this.RaisePropertyChanged("MarginLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalAccountValue {
            get {
                return this.TotalAccountValueField;
            }
            set {
                if ((this.TotalAccountValueField.Equals(value) != true)) {
                    this.TotalAccountValueField = value;
                    this.RaisePropertyChanged("TotalAccountValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalLoans {
            get {
                return this.TotalLoansField;
            }
            set {
                if ((this.TotalLoansField.Equals(value) != true)) {
                    this.TotalLoansField = value;
                    this.RaisePropertyChanged("TotalLoans");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMargins {
            get {
                return this.TotalMarginsField;
            }
            set {
                if ((this.TotalMarginsField.Equals(value) != true)) {
                    this.TotalMarginsField = value;
                    this.RaisePropertyChanged("TotalMargins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ValueOfOpenPositions {
            get {
                return this.ValueOfOpenPositionsField;
            }
            set {
                if ((this.ValueOfOpenPositionsField.Equals(value) != true)) {
                    this.ValueOfOpenPositionsField = value;
                    this.RaisePropertyChanged("ValueOfOpenPositions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Quotes", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Quotes : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Quote[] QuotesListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Quote[] QuotesList {
            get {
                return this.QuotesListField;
            }
            set {
                if ((object.ReferenceEquals(this.QuotesListField, value) != true)) {
                    this.QuotesListField = value;
                    this.RaisePropertyChanged("QuotesList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Quote", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Quote : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ChangePercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreviousHighField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PreviousLowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuoteCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Ask {
            get {
                return this.AskField;
            }
            set {
                if ((this.AskField.Equals(value) != true)) {
                    this.AskField = value;
                    this.RaisePropertyChanged("Ask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseCurrency {
            get {
                return this.BaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseCurrencyField, value) != true)) {
                    this.BaseCurrencyField = value;
                    this.RaisePropertyChanged("BaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Bid {
            get {
                return this.BidField;
            }
            set {
                if ((this.BidField.Equals(value) != true)) {
                    this.BidField = value;
                    this.RaisePropertyChanged("Bid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ChangePercent {
            get {
                return this.ChangePercentField;
            }
            set {
                if ((this.ChangePercentField.Equals(value) != true)) {
                    this.ChangePercentField = value;
                    this.RaisePropertyChanged("ChangePercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double High {
            get {
                return this.HighField;
            }
            set {
                if ((this.HighField.Equals(value) != true)) {
                    this.HighField = value;
                    this.RaisePropertyChanged("High");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Low {
            get {
                return this.LowField;
            }
            set {
                if ((this.LowField.Equals(value) != true)) {
                    this.LowField = value;
                    this.RaisePropertyChanged("Low");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousHigh {
            get {
                return this.PreviousHighField;
            }
            set {
                if ((this.PreviousHighField.Equals(value) != true)) {
                    this.PreviousHighField = value;
                    this.RaisePropertyChanged("PreviousHigh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PreviousLow {
            get {
                return this.PreviousLowField;
            }
            set {
                if ((this.PreviousLowField.Equals(value) != true)) {
                    this.PreviousLowField = value;
                    this.RaisePropertyChanged("PreviousLow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuoteCurrency {
            get {
                return this.QuoteCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.QuoteCurrencyField, value) != true)) {
                    this.QuoteCurrencyField = value;
                    this.RaisePropertyChanged("QuoteCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserSettings", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class UserSettings : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountBaseCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowWithdrawalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowedForDRChatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowedForDayTradingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowedForForwardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowedForLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FreeBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDemoUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnableFractionalPipsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMCAUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinimumOverallSecuritiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OpenPositionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.PortalsForCountry PortalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> QuestionnaireIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RegionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RestrictedCurrenciesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Ticket[] TicketsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalAmountForWithdrawField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalMarginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.UserStatusFlags UserStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountBaseCurrency {
            get {
                return this.AccountBaseCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountBaseCurrencyField, value) != true)) {
                    this.AccountBaseCurrencyField = value;
                    this.RaisePropertyChanged("AccountBaseCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowWithdrawal {
            get {
                return this.AllowWithdrawalField;
            }
            set {
                if ((this.AllowWithdrawalField.Equals(value) != true)) {
                    this.AllowWithdrawalField = value;
                    this.RaisePropertyChanged("AllowWithdrawal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowedForDRChat {
            get {
                return this.AllowedForDRChatField;
            }
            set {
                if ((this.AllowedForDRChatField.Equals(value) != true)) {
                    this.AllowedForDRChatField = value;
                    this.RaisePropertyChanged("AllowedForDRChat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowedForDayTrading {
            get {
                return this.AllowedForDayTradingField;
            }
            set {
                if ((this.AllowedForDayTradingField.Equals(value) != true)) {
                    this.AllowedForDayTradingField = value;
                    this.RaisePropertyChanged("AllowedForDayTrading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowedForForward {
            get {
                return this.AllowedForForwardField;
            }
            set {
                if ((this.AllowedForForwardField.Equals(value) != true)) {
                    this.AllowedForForwardField = value;
                    this.RaisePropertyChanged("AllowedForForward");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowedForLimit {
            get {
                return this.AllowedForLimitField;
            }
            set {
                if ((this.AllowedForLimitField.Equals(value) != true)) {
                    this.AllowedForLimitField = value;
                    this.RaisePropertyChanged("AllowedForLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FreeBalance {
            get {
                return this.FreeBalanceField;
            }
            set {
                if ((this.FreeBalanceField.Equals(value) != true)) {
                    this.FreeBalanceField = value;
                    this.RaisePropertyChanged("FreeBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDemoUser {
            get {
                return this.IsDemoUserField;
            }
            set {
                if ((this.IsDemoUserField.Equals(value) != true)) {
                    this.IsDemoUserField = value;
                    this.RaisePropertyChanged("IsDemoUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnableFractionalPips {
            get {
                return this.IsEnableFractionalPipsField;
            }
            set {
                if ((this.IsEnableFractionalPipsField.Equals(value) != true)) {
                    this.IsEnableFractionalPipsField = value;
                    this.RaisePropertyChanged("IsEnableFractionalPips");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMCAUser {
            get {
                return this.IsMCAUserField;
            }
            set {
                if ((this.IsMCAUserField.Equals(value) != true)) {
                    this.IsMCAUserField = value;
                    this.RaisePropertyChanged("IsMCAUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinimumOverallSecurities {
            get {
                return this.MinimumOverallSecuritiesField;
            }
            set {
                if ((this.MinimumOverallSecuritiesField.Equals(value) != true)) {
                    this.MinimumOverallSecuritiesField = value;
                    this.RaisePropertyChanged("MinimumOverallSecurities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OpenPositions {
            get {
                return this.OpenPositionsField;
            }
            set {
                if ((this.OpenPositionsField.Equals(value) != true)) {
                    this.OpenPositionsField = value;
                    this.RaisePropertyChanged("OpenPositions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.PortalsForCountry Portals {
            get {
                return this.PortalsField;
            }
            set {
                if ((object.ReferenceEquals(this.PortalsField, value) != true)) {
                    this.PortalsField = value;
                    this.RaisePropertyChanged("Portals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> QuestionnaireId {
            get {
                return this.QuestionnaireIdField;
            }
            set {
                if ((this.QuestionnaireIdField.Equals(value) != true)) {
                    this.QuestionnaireIdField = value;
                    this.RaisePropertyChanged("QuestionnaireId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RegionId {
            get {
                return this.RegionIdField;
            }
            set {
                if ((this.RegionIdField.Equals(value) != true)) {
                    this.RegionIdField = value;
                    this.RaisePropertyChanged("RegionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RestrictedCurrencies {
            get {
                return this.RestrictedCurrenciesField;
            }
            set {
                if ((object.ReferenceEquals(this.RestrictedCurrenciesField, value) != true)) {
                    this.RestrictedCurrenciesField = value;
                    this.RaisePropertyChanged("RestrictedCurrencies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Ticket[] Tickets {
            get {
                return this.TicketsField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketsField, value) != true)) {
                    this.TicketsField = value;
                    this.RaisePropertyChanged("Tickets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalAmountForWithdraw {
            get {
                return this.TotalAmountForWithdrawField;
            }
            set {
                if ((this.TotalAmountForWithdrawField.Equals(value) != true)) {
                    this.TotalAmountForWithdrawField = value;
                    this.RaisePropertyChanged("TotalAmountForWithdraw");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMargin {
            get {
                return this.TotalMarginField;
            }
            set {
                if ((this.TotalMarginField.Equals(value) != true)) {
                    this.TotalMarginField = value;
                    this.RaisePropertyChanged("TotalMargin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.UserStatusFlags UserStatus {
            get {
                return this.UserStatusField;
            }
            set {
                if ((this.UserStatusField.Equals(value) != true)) {
                    this.UserStatusField = value;
                    this.RaisePropertyChanged("UserStatus");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpiryDate", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class ExpiryDate : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductSet", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class ProductSet : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CloseDenySecondsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.CurrencyPairAmounts[] CurrencyPairsAmountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.LimitBand LimitBoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double[] MarginsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Bounds StopLossBoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Bounds TakeProfitBoundsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CloseDenySeconds {
            get {
                return this.CloseDenySecondsField;
            }
            set {
                if ((this.CloseDenySecondsField.Equals(value) != true)) {
                    this.CloseDenySecondsField = value;
                    this.RaisePropertyChanged("CloseDenySeconds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.CurrencyPairAmounts[] CurrencyPairsAmounts {
            get {
                return this.CurrencyPairsAmountsField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyPairsAmountsField, value) != true)) {
                    this.CurrencyPairsAmountsField = value;
                    this.RaisePropertyChanged("CurrencyPairsAmounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.LimitBand LimitBounds {
            get {
                return this.LimitBoundsField;
            }
            set {
                if ((object.ReferenceEquals(this.LimitBoundsField, value) != true)) {
                    this.LimitBoundsField = value;
                    this.RaisePropertyChanged("LimitBounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Margins {
            get {
                return this.MarginsField;
            }
            set {
                if ((object.ReferenceEquals(this.MarginsField, value) != true)) {
                    this.MarginsField = value;
                    this.RaisePropertyChanged("Margins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxAmount {
            get {
                return this.MaxAmountField;
            }
            set {
                if ((this.MaxAmountField.Equals(value) != true)) {
                    this.MaxAmountField = value;
                    this.RaisePropertyChanged("MaxAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinAmount {
            get {
                return this.MinAmountField;
            }
            set {
                if ((this.MinAmountField.Equals(value) != true)) {
                    this.MinAmountField = value;
                    this.RaisePropertyChanged("MinAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Step {
            get {
                return this.StepField;
            }
            set {
                if ((this.StepField.Equals(value) != true)) {
                    this.StepField = value;
                    this.RaisePropertyChanged("Step");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Bounds StopLossBounds {
            get {
                return this.StopLossBoundsField;
            }
            set {
                if ((object.ReferenceEquals(this.StopLossBoundsField, value) != true)) {
                    this.StopLossBoundsField = value;
                    this.RaisePropertyChanged("StopLossBounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Bounds TakeProfitBounds {
            get {
                return this.TakeProfitBoundsField;
            }
            set {
                if ((object.ReferenceEquals(this.TakeProfitBoundsField, value) != true)) {
                    this.TakeProfitBoundsField = value;
                    this.RaisePropertyChanged("TakeProfitBounds");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpreadsTemplateInfo", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class SpreadsTemplateInfo : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonalSpreadsInfo", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class PersonalSpreadsInfo : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.SpreadsTemplateInfo ActiveSpreadsTemplateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, EFx.Dal.TradingService.AllowPersonalSpreadInfo> AllowPersonalSpreadsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.SpreadsTemplateInfo ActiveSpreadsTemplate {
            get {
                return this.ActiveSpreadsTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.ActiveSpreadsTemplateField, value) != true)) {
                    this.ActiveSpreadsTemplateField = value;
                    this.RaisePropertyChanged("ActiveSpreadsTemplate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, EFx.Dal.TradingService.AllowPersonalSpreadInfo> AllowPersonalSpreads {
            get {
                return this.AllowPersonalSpreadsField;
            }
            set {
                if ((object.ReferenceEquals(this.AllowPersonalSpreadsField, value) != true)) {
                    this.AllowPersonalSpreadsField = value;
                    this.RaisePropertyChanged("AllowPersonalSpreads");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AllowPersonalSpreadInfo", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class AllowPersonalSpreadInfo : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrecnyPairField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAllowPersonalSpreadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrecnyPair {
            get {
                return this.CurrecnyPairField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrecnyPairField, value) != true)) {
                    this.CurrecnyPairField = value;
                    this.RaisePropertyChanged("CurrecnyPair");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAllowPersonalSpread {
            get {
                return this.IsAllowPersonalSpreadField;
            }
            set {
                if ((this.IsAllowPersonalSpreadField.Equals(value) != true)) {
                    this.IsAllowPersonalSpreadField = value;
                    this.RaisePropertyChanged("IsAllowPersonalSpread");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLoginInfo", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class UserLoginInfo : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyStatement", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class MyStatement : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccBaseCurrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.MyStatementAccountTransaction[] AccountTransactionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FreeBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalMarginOrEquityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WithdrawalAvailableField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccBaseCurr {
            get {
                return this.AccBaseCurrField;
            }
            set {
                if ((object.ReferenceEquals(this.AccBaseCurrField, value) != true)) {
                    this.AccBaseCurrField = value;
                    this.RaisePropertyChanged("AccBaseCurr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.MyStatementAccountTransaction[] AccountTransactions {
            get {
                return this.AccountTransactionsField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountTransactionsField, value) != true)) {
                    this.AccountTransactionsField = value;
                    this.RaisePropertyChanged("AccountTransactions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FreeBalance {
            get {
                return this.FreeBalanceField;
            }
            set {
                if ((this.FreeBalanceField.Equals(value) != true)) {
                    this.FreeBalanceField = value;
                    this.RaisePropertyChanged("FreeBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Tax {
            get {
                return this.TaxField;
            }
            set {
                if ((this.TaxField.Equals(value) != true)) {
                    this.TaxField = value;
                    this.RaisePropertyChanged("Tax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMarginOrEquity {
            get {
                return this.TotalMarginOrEquityField;
            }
            set {
                if ((this.TotalMarginOrEquityField.Equals(value) != true)) {
                    this.TotalMarginOrEquityField = value;
                    this.RaisePropertyChanged("TotalMarginOrEquity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WithdrawalAvailable {
            get {
                return this.WithdrawalAvailableField;
            }
            set {
                if ((this.WithdrawalAvailableField.Equals(value) != true)) {
                    this.WithdrawalAvailableField = value;
                    this.RaisePropertyChanged("WithdrawalAvailable");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RollingDatesResult", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class RollingDatesResult : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.RollingDates RollingDatesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.RollingDates RollingDates {
            get {
                return this.RollingDatesField;
            }
            set {
                if ((this.RollingDatesField.Equals(value) != true)) {
                    this.RollingDatesField = value;
                    this.RaisePropertyChanged("RollingDates");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Session : EFx.Dal.TradingService.APIOperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Ticket[] TicketsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EFx.Dal.TradingService.Version VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIdField, value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Ticket[] Tickets {
            get {
                return this.TicketsField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketsField, value) != true)) {
                    this.TicketsField = value;
                    this.RaisePropertyChanged("Tickets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EFx.Dal.TradingService.Version Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Version", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Version : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GenerationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MajorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Generation {
            get {
                return this.GenerationField;
            }
            set {
                if ((this.GenerationField.Equals(value) != true)) {
                    this.GenerationField = value;
                    this.RaisePropertyChanged("Generation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Major {
            get {
                return this.MajorField;
            }
            set {
                if ((this.MajorField.Equals(value) != true)) {
                    this.MajorField = value;
                    this.RaisePropertyChanged("Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Minor {
            get {
                return this.MinorField;
            }
            set {
                if ((this.MinorField.Equals(value) != true)) {
                    this.MinorField = value;
                    this.RaisePropertyChanged("Minor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class Ticket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TicketNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TicketValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TicketName {
            get {
                return this.TicketNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketNameField, value) != true)) {
                    this.TicketNameField = value;
                    this.RaisePropertyChanged("TicketName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TicketValue {
            get {
                return this.TicketValueField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketValueField, value) != true)) {
                    this.TicketValueField = value;
                    this.RaisePropertyChanged("TicketValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Products", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    public enum Products : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = -2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DayTrading = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forward = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Limit = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortalsForCountry", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class PortalsForCountry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DefaultPortalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultPortalNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] PortalsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PortalsNamesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DefaultPortal {
            get {
                return this.DefaultPortalField;
            }
            set {
                if ((this.DefaultPortalField.Equals(value) != true)) {
                    this.DefaultPortalField = value;
                    this.RaisePropertyChanged("DefaultPortal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultPortalName {
            get {
                return this.DefaultPortalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultPortalNameField, value) != true)) {
                    this.DefaultPortalNameField = value;
                    this.RaisePropertyChanged("DefaultPortalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Portals {
            get {
                return this.PortalsField;
            }
            set {
                if ((object.ReferenceEquals(this.PortalsField, value) != true)) {
                    this.PortalsField = value;
                    this.RaisePropertyChanged("Portals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PortalsNames {
            get {
                return this.PortalsNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.PortalsNamesField, value) != true)) {
                    this.PortalsNamesField = value;
                    this.RaisePropertyChanged("PortalsNames");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserStatusFlags", Namespace="http://schemas.datacontract.org/2004/07/EZFX.Model.Classes")]
    public enum UserStatusFlags : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Practice = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExpiredPractice = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WasPractice = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lead = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Restricted = 32,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LimitBand", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class LimitBand : EFx.Dal.TradingService.Bounds {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StopLossMinField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double StopLossMin {
            get {
                return this.StopLossMinField;
            }
            set {
                if ((this.StopLossMinField.Equals(value) != true)) {
                    this.StopLossMinField = value;
                    this.RaisePropertyChanged("StopLossMin");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bounds", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EFx.Dal.TradingService.LimitBand))]
    public partial class Bounds : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Max {
            get {
                return this.MaxField;
            }
            set {
                if ((this.MaxField.Equals(value) != true)) {
                    this.MaxField = value;
                    this.RaisePropertyChanged("Max");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Min {
            get {
                return this.MinField;
            }
            set {
                if ((this.MinField.Equals(value) != true)) {
                    this.MinField = value;
                    this.RaisePropertyChanged("Min");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyPairAmounts", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class CurrencyPairAmounts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AmountsCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ContractSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MarginContractSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarginsCurrencyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AmountsCurrency {
            get {
                return this.AmountsCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.AmountsCurrencyField, value) != true)) {
                    this.AmountsCurrencyField = value;
                    this.RaisePropertyChanged("AmountsCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ContractSize {
            get {
                return this.ContractSizeField;
            }
            set {
                if ((this.ContractSizeField.Equals(value) != true)) {
                    this.ContractSizeField = value;
                    this.RaisePropertyChanged("ContractSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MarginContractSize {
            get {
                return this.MarginContractSizeField;
            }
            set {
                if ((this.MarginContractSizeField.Equals(value) != true)) {
                    this.MarginContractSizeField = value;
                    this.RaisePropertyChanged("MarginContractSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarginsCurrency {
            get {
                return this.MarginsCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.MarginsCurrencyField, value) != true)) {
                    this.MarginsCurrencyField = value;
                    this.RaisePropertyChanged("MarginsCurrency");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyStatementAccountTransaction", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class MyStatementAccountTransaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FreeBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MCurrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> MargField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> TransIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DDate {
            get {
                return this.DDateField;
            }
            set {
                if ((this.DDateField.Equals(value) != true)) {
                    this.DDateField = value;
                    this.RaisePropertyChanged("DDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FreeBalance {
            get {
                return this.FreeBalanceField;
            }
            set {
                if ((this.FreeBalanceField.Equals(value) != true)) {
                    this.FreeBalanceField = value;
                    this.RaisePropertyChanged("FreeBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MCurr {
            get {
                return this.MCurrField;
            }
            set {
                if ((object.ReferenceEquals(this.MCurrField, value) != true)) {
                    this.MCurrField = value;
                    this.RaisePropertyChanged("MCurr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Marg {
            get {
                return this.MargField;
            }
            set {
                if ((this.MargField.Equals(value) != true)) {
                    this.MargField = value;
                    this.RaisePropertyChanged("Marg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> TransId {
            get {
                return this.TransIdField;
            }
            set {
                if ((this.TransIdField.Equals(value) != true)) {
                    this.TransIdField = value;
                    this.RaisePropertyChanged("TransId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RollingDates", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial struct RollingDates : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DefaultDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DefaultDate {
            get {
                return this.DefaultDateField;
            }
            set {
                if ((this.DefaultDateField.Equals(value) != true)) {
                    this.DefaultDateField = value;
                    this.RaisePropertyChanged("DefaultDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TradableQuoteRequestParams", Namespace="http://schemas.datacontract.org/2004/07/EZFX.API.Common")]
    [System.SerializableAttribute()]
    public partial class TradableQuoteRequestParams : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ForwardDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PairSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<EFx.Dal.TradingService.Products> ProductField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ForwardDate {
            get {
                return this.ForwardDateField;
            }
            set {
                if ((this.ForwardDateField.Equals(value) != true)) {
                    this.ForwardDateField = value;
                    this.RaisePropertyChanged("ForwardDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PairSymbol {
            get {
                return this.PairSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.PairSymbolField, value) != true)) {
                    this.PairSymbolField = value;
                    this.RaisePropertyChanged("PairSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<EFx.Dal.TradingService.Products> Product {
            get {
                return this.ProductField;
            }
            set {
                if ((this.ProductField.Equals(value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TradingService.IEasyForexTradingService")]
    public interface IEasyForexTradingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/Login", ReplyAction="http://tempuri.org/IEasyForexTradingService/LoginResponse")]
        EFx.Dal.TradingService.Session Login(string applicationId, string userName, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/Logout", ReplyAction="http://tempuri.org/IEasyForexTradingService/LogoutResponse")]
        EFx.Dal.TradingService.APIOperationResult Logout(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetTradableQuotes", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetTradableQuotesResponse")]
        EFx.Dal.TradingService.TradableQuotes GetTradableQuotes(string sessionId, EFx.Dal.TradingService.TradableQuoteRequestParams[] requestParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/NewDayTradingDeal", ReplyAction="http://tempuri.org/IEasyForexTradingService/NewDayTradingDealResponse")]
        EFx.Dal.TradingService.DayTrading NewDayTradingDeal(string sessionId, string buyCurrency, string sellCurrency, double dealAmount, string tradableQuoteId, System.Nullable<double> boundaryRate, System.Nullable<double> stopLossRate, System.Nullable<double> takeProfitRate, System.Nullable<double> margin, System.Nullable<double> takeProfitAmount, string requestTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/NewForwardDeal", ReplyAction="http://tempuri.org/IEasyForexTradingService/NewForwardDealResponse")]
        EFx.Dal.TradingService.Forward NewForwardDeal(string sessionId, string buyCurrency, string sellCurrency, double dealAmount, string tradableQuoteId, System.DateTime forwardDate, System.Nullable<double> stopLossRate, System.Nullable<double> takeProfitRate, System.Nullable<double> margin, System.Nullable<double> takeProfitAmount, string requestTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/NewLimitOrder", ReplyAction="http://tempuri.org/IEasyForexTradingService/NewLimitOrderResponse")]
        EFx.Dal.TradingService.Limit NewLimitOrder(string sessionId, string buyCurrency, string sellCurrency, double dealAmount, double rate, System.DateTime expiryDate, System.Nullable<double> stopLossRate, System.Nullable<double> takeProfitRate, System.Nullable<double> margin, System.Nullable<double> takeProfitAmount, string requestTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/UpdateDayTrading", ReplyAction="http://tempuri.org/IEasyForexTradingService/UpdateDayTradingResponse")]
        EFx.Dal.TradingService.DayTrading UpdateDayTrading(string sessionId, long dealId, System.Nullable<double> newStopLossRate, System.Nullable<double> newTakeProfitRate, System.Nullable<double> newMargin, System.Nullable<double> newTakeProfitAmount, bool removeCurrentTakeProfit, string requestTag, bool removeCurrentStopLoss);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/UpdateForward", ReplyAction="http://tempuri.org/IEasyForexTradingService/UpdateForwardResponse")]
        EFx.Dal.TradingService.Forward UpdateForward(string sessionId, long dealId, System.Nullable<double> newStopLossRate, System.Nullable<double> newTakeProfitRate, System.Nullable<double> newMargin, System.Nullable<double> newTakeProfitAmount, bool removeCurrentTakeProfit, string requestTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/UpdateLimit", ReplyAction="http://tempuri.org/IEasyForexTradingService/UpdateLimitResponse")]
        EFx.Dal.TradingService.Limit UpdateLimit(string sessionId, long dealId, System.Nullable<double> newStopLossRate, System.Nullable<double> newTakeProfitRate, System.Nullable<double> newMargin, System.Nullable<double> newTakeProfitAmount, bool removeCurrentTakeProfit, string requestTag, bool removeCurrentStopLoss);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetDayTradingStatus", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetDayTradingStatusResponse")]
        EFx.Dal.TradingService.DayTrading GetDayTradingStatus(string sessionId, long dealId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetForwardStatus", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetForwardStatusResponse")]
        EFx.Dal.TradingService.Forward GetForwardStatus(string sessionId, long dealId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetLimitStatus", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetLimitStatusResponse")]
        EFx.Dal.TradingService.Limit GetLimitStatus(string sessionId, long dealId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/CloseDayTrading", ReplyAction="http://tempuri.org/IEasyForexTradingService/CloseDayTradingResponse")]
        EFx.Dal.TradingService.DayTrading CloseDayTrading(string sessionId, long dealId, string tradableQuoteId, System.Nullable<double> boundaryRate, string requestTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/CloseForward", ReplyAction="http://tempuri.org/IEasyForexTradingService/CloseForwardResponse")]
        EFx.Dal.TradingService.Forward CloseForward(string sessionId, long dealId, string tradableQuoteId, string requestTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/CancelLimitOrder", ReplyAction="http://tempuri.org/IEasyForexTradingService/CancelLimitOrderResponse")]
        EFx.Dal.TradingService.Limit CancelLimitOrder(string sessionId, long dealId, string requestTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetMyPosition", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetMyPositionResponse")]
        EFx.Dal.TradingService.MyPosition GetMyPosition(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetAccountStatus", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetAccountStatusResponse")]
        EFx.Dal.TradingService.MyAccount GetAccountStatus(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetQuotes", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetQuotesResponse")]
        EFx.Dal.TradingService.Quotes GetQuotes(string sessionId, string[] currencyPairsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetUserSettings", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetUserSettingsResponse")]
        EFx.Dal.TradingService.UserSettings GetUserSettings(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetExpiryDate", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetExpiryDateResponse")]
        EFx.Dal.TradingService.ExpiryDate GetExpiryDate(string sessionId, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetProductSet", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetProductSetResponse")]
        EFx.Dal.TradingService.ProductSet GetProductSet(string sessionId, EFx.Dal.TradingService.Products dealType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetActiveSpreadsTemplate", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetActiveSpreadsTemplateResponse")]
        EFx.Dal.TradingService.SpreadsTemplateInfo GetActiveSpreadsTemplate(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetAllowPersonalSpreads", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetAllowPersonalSpreadsResponse")]
        EFx.Dal.TradingService.PersonalSpreadsInfo GetAllowPersonalSpreads(string sessionId, string[] currencyPairsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetClosedPosition", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetClosedPositionResponse")]
        EFx.Dal.TradingService.MyPosition GetClosedPosition(string sessionId, System.DateTime fromDate, System.DateTime toDate, System.Nullable<EFx.Dal.TradingService.Products> dealType, System.Nullable<int> curPage, System.Nullable<int> count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetUserLoginInfo", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetUserLoginInfoResponse")]
        EFx.Dal.TradingService.UserLoginInfo GetUserLoginInfo(string sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetMyStatement", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetMyStatementResponse")]
        EFx.Dal.TradingService.MyStatement GetMyStatement(string sessionId, System.DateTime fromDate, System.DateTime toDate, int sortIndex, bool sortType, System.Nullable<int> count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEasyForexTradingService/GetRollingDates", ReplyAction="http://tempuri.org/IEasyForexTradingService/GetRollingDatesResponse")]
        EFx.Dal.TradingService.RollingDatesResult GetRollingDates(string sessionId, EFx.Dal.TradingService.Products productType, string buyCurrency, string sellCurrency);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEasyForexTradingServiceChannel : EFx.Dal.TradingService.IEasyForexTradingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EasyForexTradingServiceClient : System.ServiceModel.ClientBase<EFx.Dal.TradingService.IEasyForexTradingService>, EFx.Dal.TradingService.IEasyForexTradingService {
        
        public EasyForexTradingServiceClient() {
        }
        
        public EasyForexTradingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EasyForexTradingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EasyForexTradingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EasyForexTradingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EFx.Dal.TradingService.Session Login(string applicationId, string userName, string userPassword) {
            return base.Channel.Login(applicationId, userName, userPassword);
        }
        
        public EFx.Dal.TradingService.APIOperationResult Logout(string sessionId) {
            return base.Channel.Logout(sessionId);
        }
        
        public EFx.Dal.TradingService.TradableQuotes GetTradableQuotes(string sessionId, EFx.Dal.TradingService.TradableQuoteRequestParams[] requestParams) {
            return base.Channel.GetTradableQuotes(sessionId, requestParams);
        }
        
        public EFx.Dal.TradingService.DayTrading NewDayTradingDeal(string sessionId, string buyCurrency, string sellCurrency, double dealAmount, string tradableQuoteId, System.Nullable<double> boundaryRate, System.Nullable<double> stopLossRate, System.Nullable<double> takeProfitRate, System.Nullable<double> margin, System.Nullable<double> takeProfitAmount, string requestTag) {
            return base.Channel.NewDayTradingDeal(sessionId, buyCurrency, sellCurrency, dealAmount, tradableQuoteId, boundaryRate, stopLossRate, takeProfitRate, margin, takeProfitAmount, requestTag);
        }
        
        public EFx.Dal.TradingService.Forward NewForwardDeal(string sessionId, string buyCurrency, string sellCurrency, double dealAmount, string tradableQuoteId, System.DateTime forwardDate, System.Nullable<double> stopLossRate, System.Nullable<double> takeProfitRate, System.Nullable<double> margin, System.Nullable<double> takeProfitAmount, string requestTag) {
            return base.Channel.NewForwardDeal(sessionId, buyCurrency, sellCurrency, dealAmount, tradableQuoteId, forwardDate, stopLossRate, takeProfitRate, margin, takeProfitAmount, requestTag);
        }
        
        public EFx.Dal.TradingService.Limit NewLimitOrder(string sessionId, string buyCurrency, string sellCurrency, double dealAmount, double rate, System.DateTime expiryDate, System.Nullable<double> stopLossRate, System.Nullable<double> takeProfitRate, System.Nullable<double> margin, System.Nullable<double> takeProfitAmount, string requestTag) {
            return base.Channel.NewLimitOrder(sessionId, buyCurrency, sellCurrency, dealAmount, rate, expiryDate, stopLossRate, takeProfitRate, margin, takeProfitAmount, requestTag);
        }
        
        public EFx.Dal.TradingService.DayTrading UpdateDayTrading(string sessionId, long dealId, System.Nullable<double> newStopLossRate, System.Nullable<double> newTakeProfitRate, System.Nullable<double> newMargin, System.Nullable<double> newTakeProfitAmount, bool removeCurrentTakeProfit, string requestTag, bool removeCurrentStopLoss) {
            return base.Channel.UpdateDayTrading(sessionId, dealId, newStopLossRate, newTakeProfitRate, newMargin, newTakeProfitAmount, removeCurrentTakeProfit, requestTag, removeCurrentStopLoss);
        }
        
        public EFx.Dal.TradingService.Forward UpdateForward(string sessionId, long dealId, System.Nullable<double> newStopLossRate, System.Nullable<double> newTakeProfitRate, System.Nullable<double> newMargin, System.Nullable<double> newTakeProfitAmount, bool removeCurrentTakeProfit, string requestTag) {
            return base.Channel.UpdateForward(sessionId, dealId, newStopLossRate, newTakeProfitRate, newMargin, newTakeProfitAmount, removeCurrentTakeProfit, requestTag);
        }
        
        public EFx.Dal.TradingService.Limit UpdateLimit(string sessionId, long dealId, System.Nullable<double> newStopLossRate, System.Nullable<double> newTakeProfitRate, System.Nullable<double> newMargin, System.Nullable<double> newTakeProfitAmount, bool removeCurrentTakeProfit, string requestTag, bool removeCurrentStopLoss) {
            return base.Channel.UpdateLimit(sessionId, dealId, newStopLossRate, newTakeProfitRate, newMargin, newTakeProfitAmount, removeCurrentTakeProfit, requestTag, removeCurrentStopLoss);
        }
        
        public EFx.Dal.TradingService.DayTrading GetDayTradingStatus(string sessionId, long dealId) {
            return base.Channel.GetDayTradingStatus(sessionId, dealId);
        }
        
        public EFx.Dal.TradingService.Forward GetForwardStatus(string sessionId, long dealId) {
            return base.Channel.GetForwardStatus(sessionId, dealId);
        }
        
        public EFx.Dal.TradingService.Limit GetLimitStatus(string sessionId, long dealId) {
            return base.Channel.GetLimitStatus(sessionId, dealId);
        }
        
        public EFx.Dal.TradingService.DayTrading CloseDayTrading(string sessionId, long dealId, string tradableQuoteId, System.Nullable<double> boundaryRate, string requestTag) {
            return base.Channel.CloseDayTrading(sessionId, dealId, tradableQuoteId, boundaryRate, requestTag);
        }
        
        public EFx.Dal.TradingService.Forward CloseForward(string sessionId, long dealId, string tradableQuoteId, string requestTag) {
            return base.Channel.CloseForward(sessionId, dealId, tradableQuoteId, requestTag);
        }
        
        public EFx.Dal.TradingService.Limit CancelLimitOrder(string sessionId, long dealId, string requestTag) {
            return base.Channel.CancelLimitOrder(sessionId, dealId, requestTag);
        }
        
        public EFx.Dal.TradingService.MyPosition GetMyPosition(string sessionId) {
            return base.Channel.GetMyPosition(sessionId);
        }
        
        public EFx.Dal.TradingService.MyAccount GetAccountStatus(string sessionId) {
            return base.Channel.GetAccountStatus(sessionId);
        }
        
        public EFx.Dal.TradingService.Quotes GetQuotes(string sessionId, string[] currencyPairsList) {
            return base.Channel.GetQuotes(sessionId, currencyPairsList);
        }
        
        public EFx.Dal.TradingService.UserSettings GetUserSettings(string sessionId) {
            return base.Channel.GetUserSettings(sessionId);
        }
        
        public EFx.Dal.TradingService.ExpiryDate GetExpiryDate(string sessionId, string currency) {
            return base.Channel.GetExpiryDate(sessionId, currency);
        }
        
        public EFx.Dal.TradingService.ProductSet GetProductSet(string sessionId, EFx.Dal.TradingService.Products dealType) {
            return base.Channel.GetProductSet(sessionId, dealType);
        }
        
        public EFx.Dal.TradingService.SpreadsTemplateInfo GetActiveSpreadsTemplate(string sessionId) {
            return base.Channel.GetActiveSpreadsTemplate(sessionId);
        }
        
        public EFx.Dal.TradingService.PersonalSpreadsInfo GetAllowPersonalSpreads(string sessionId, string[] currencyPairsList) {
            return base.Channel.GetAllowPersonalSpreads(sessionId, currencyPairsList);
        }
        
        public EFx.Dal.TradingService.MyPosition GetClosedPosition(string sessionId, System.DateTime fromDate, System.DateTime toDate, System.Nullable<EFx.Dal.TradingService.Products> dealType, System.Nullable<int> curPage, System.Nullable<int> count) {
            return base.Channel.GetClosedPosition(sessionId, fromDate, toDate, dealType, curPage, count);
        }
        
        public EFx.Dal.TradingService.UserLoginInfo GetUserLoginInfo(string sessionId) {
            return base.Channel.GetUserLoginInfo(sessionId);
        }
        
        public EFx.Dal.TradingService.MyStatement GetMyStatement(string sessionId, System.DateTime fromDate, System.DateTime toDate, int sortIndex, bool sortType, System.Nullable<int> count) {
            return base.Channel.GetMyStatement(sessionId, fromDate, toDate, sortIndex, sortType, count);
        }
        
        public EFx.Dal.TradingService.RollingDatesResult GetRollingDates(string sessionId, EFx.Dal.TradingService.Products productType, string buyCurrency, string sellCurrency) {
            return base.Channel.GetRollingDates(sessionId, productType, buyCurrency, sellCurrency);
        }
    }
}
